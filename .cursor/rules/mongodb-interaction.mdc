---
description:
globs:
alwaysApply: false
---
# MongoDB Interaction Patterns

## Todo Data Structure

The MongoDB collection for todos uses the following schema:

```javascript
{
  _id: "UUID-formatted string",
  description: "Task description text",
  project: "Project category name",
  status: "initial"|"pending"|"completed",
  priority: "Low"|"Medium"|"High",
  created: ISODate("2023-01-01T12:00:00Z"),
  completed: ISODate("2023-01-02T12:00:00Z"),  // Only if completed
  target_agent: "user"|"AI assistant name",
  metadata: { /* Optional additional fields */ }
}
```

## Query Operations

### Finding Todos

```javascript
// Get specific todo by ID
msg.operation = "findOne";
msg.collection = "todos";
msg.query = { _id: todoId };

// List todos by status
msg.operation = "find";
msg.collection = "todos";
msg.query = { status: "pending" };
msg.options = {
    sort: { created: -1 },
    limit: 50
};

// List todos by project
msg.operation = "find";
msg.collection = "todos";
msg.query = { project: projectName };
```

### Updating Todos

```javascript
// Update fields
msg.operation = "update";
msg.collection = "todos";
msg.query = { _id: todoId };
msg.update = { $set: updates };
msg.options = { returnUpdatedDocs: true };

// Mark as complete
msg.operation = "update";
msg.collection = "todos";
msg.query = { _id: todoId };
msg.update = {
    $set: {
        status: "completed",
        completed: new Date()
    }
};
```

### Creating Todos

```javascript
msg.operation = "insert";
msg.collection = "todos";
msg.payload = {
    _id: uuid.v4(),
    description: "Task description",
    project: "Project name",
    status: "initial",
    priority: "Medium",
    created: new Date(),
    target_agent: "user"
};
```

### Deleting Todos

```javascript
msg.operation = "remove";
msg.collection = "todos";
msg.query = { _id: todoId };
```

## Response Handling

MongoDB nodes in Node-RED return responses in different formats based on operation:

- **findOne**: Returns single document or null in `msg.payload`
- **find**: Returns array of documents in `msg.payload`
- **insert**: Returns inserted document(s) in `msg.payload`
- **update**: Returns `{ matchedCount, modifiedCount, upsertedId }` or the updated document if `returnUpdatedDocs: true`
- **remove**: Returns `{ deletedCount }`

Error handling is done by checking for `msg.error` property that may be set by the mongodb4 node.

## Field Normalization

When processing todo data, these patterns are used:

- Status is normalized to lowercase then capitalized: `"pending"` → `"Pending"`
- Priority accepts case-insensitive values: `"high"`, `"High"`, `"HIGH"` → `"High"`
- Dates stored as ISO strings or Date objects
- Missing fields are handled with default values
