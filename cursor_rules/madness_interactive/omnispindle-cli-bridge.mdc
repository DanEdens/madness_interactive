---
description:
globs:
alwaysApply: false
---
# Omnispindle CLI Bridge Subrepo

## Purpose
The Omnispindle CLI Bridge is a streamlined interface for integrating Omnispindle MCP todo server capabilities with external systems, particularly designed for Gemini gem integration. It provides clean, validated interfaces between external systems and the complex Omnispindle/Swarmonomicon ecosystem.

## Key Files

### Core Implementation Files
- [omnispindle_init.py](mdc:projects/common/Omnispindle-cli-bridge/omnispindle_init.py) - Essential tool functions with clean async interfaces for MCP integration
- [tools_summary.py](mdc:projects/common/Omnispindle-cli-bridge/tools_summary.py) - Key function signatures, validation logic, and data structures
- [requirements.txt](mdc:projects/common/Omnispindle-cli-bridge/requirements.txt) - Core dependencies for MCP todo server integration

### Documentation Files
- [README.md](mdc:projects/common/Omnispindle-cli-bridge/README.md) - Gem-focused documentation with usage examples and integration patterns
- [project_overview.md](mdc:projects/common/Omnispindle-cli-bridge/project_overview.md) - Comprehensive system documentation and architecture overview

### Reference Files
- [README_Omnispindle.txt](mdc:projects/common/Omnispindle-cli-bridge/README_Omnispindle.txt) - Original Omnispindle documentation for reference
- [README_Swarmonomicon.txt](mdc:projects/common/Omnispindle-cli-bridge/README_Swarmonomicon.txt) - Original Swarmonomicon documentation for reference

## Core Functionality

### Todo Management
- **Project Validation**: Automatic validation against known projects (madness_interactive, omnispindle, swarmonomicon, etc.)
- **Priority System**: Low/Medium/High priority levels with validation
- **Status Tracking**: initial → pending → completed/review workflow
- **Agent Targeting**: Route tasks to specific processing agents

### Lessons Learned System
- **Knowledge Base**: Store and search technical lessons with full-text search
- **Categorization**: Tag-based organization by language/technology
- **Search Capabilities**: Query across topics and content with flexible field selection

### MQTT Integration
- **Real-time Messaging**: Publish/subscribe to MQTT topics for task distribution
- **Task Distribution**: Route tasks via MQTT to processing agents
- **Status Updates**: Real-time task status broadcasting

## Key Functions Available

### Todo Operations
```python
add_todo_tool(description, project, priority="Medium", target_agent="user", metadata=None)
query_todos_tool(query_or_filter=None, fields_or_projection=None, limit=100)
update_todo_tool(todo_id, updates)
mark_todo_complete_tool(todo_id)
list_todos_by_status_tool(status, limit=100)
```

### Lesson Management
```python
add_lesson_tool(language, topic, lesson_learned, tags=None)
search_lessons_tool(query, fields=None, limit=100)
```

### MQTT Communication
```python
mqtt_publish_tool(topic, message, retain=False)
mqtt_get_tool(topic)
```

## Project Validation Logic
The bridge includes fuzzy matching for project names with automatic normalization:
- Converts spaces to underscores, handles case insensitivity
- Supports partial matching for common variations
- Falls back to "madness_interactive" for unknown projects
- Known projects: madness_interactive, omnispindle, swarmonomicon, todomill_projectorium, regressiontestkit, dirname, repo_name

## Integration Patterns

### For Gemini Gems
- Clean async functions with type hints
- Standardized JSON responses for all operations
- Built-in input validation and normalization
- Predictable error handling patterns

### For Swarmonomicon
- Compatible MQTT topic structure
- Matches expected task schema format
- Supports agent-specific task queues

### Environment Configuration
```bash
MONGODB_URI=mongodb://localhost:27017
MONGODB_DB=todo_app
MQTT_BROKER=localhost:1883
```

## Usage Context
This subrepo is designed to trail behind the main Omnispindle development and provides a stable, clean interface for external integrations. When working with this code:

1. **For Modifications**: Focus on the core files (omnispindle_init.py, tools_summary.py)
2. **For Integration**: Use the README.md examples and AVAILABLE_TOOLS registry
3. **For Understanding**: Reference project_overview.md for architecture details
4. **For Dependencies**: Check requirements.txt for necessary packages

The bridge abstracts away the complexity of the underlying Omnispindle/Swarmonomicon systems while maintaining full compatibility with their data structures and communication patterns.
