---
description:
globs:
alwaysApply: false
---
# GitHub Project Management Guide

## GitHub Projects Integration

This project uses GitHub Projects for task management and tracking progress. The project board provides a visual overview of current work and integrates with issues and pull requests.

## Project Board Structure

### Board Layout

Our GitHub Project board follows this structure:

- **Todo**: Issues that are planned but not started
- **In Progress**: Issues currently being worked on
- **In Review**: Pull requests awaiting review
- **Done**: Completed issues and merged PRs

### Issue Templates

We use issue templates to standardize our workflow:

- **Bug Report**: For reporting bugs
- **Feature Request**: For suggesting new features
- **Documentation Update**: For documentation changes
- **Task**: For general development tasks

## Issue Management

### Creating Issues

When creating a new task, always:

1. Use the appropriate issue template
2. Add descriptive title and detailed description
3. Assign to the appropriate person
4. Add relevant labels
5. Link to related issues if applicable
6. Add to the project board

### Issue Labels

- `bug`: Something isn't working
- `enhancement`: New feature or request
- `documentation`: Documentation improvements
- `good first issue`: Good for newcomers
- `help wanted`: Extra attention needed
- `priority: high/medium/low`: Indicates priority level
- `blocked`: Blocked by another issue
- `wontfix`: This won't be addressed

### Automated Workflows

Our project uses GitHub Actions to automate:

- Moving issues to "In Progress" when a linked branch is created
- Moving PRs to "In Review" when opened
- Moving issues to "Done" when linked PRs are merged

## GitHub CLI for Project Management

```bash
# List projects
gh project list

# View a specific project
gh project view

# Create a new issue and add to project
gh issue create --title "New feature implementation" --body "Details here" --project "Omnispindle Development"

# Add existing issue to project
gh issue edit 123 --add-project "Omnispindle Development"
```

## Linking Work Items

### Linking Issues to Pull Requests

Use keywords in PR descriptions to automatically link issues:

- `Fixes #123` - Will close the issue when PR is merged
- `Relates to #123` - Creates a reference without auto-closing

Example PR description:
```
Implements the user authentication system.

Fixes #123
Relates to #124, #125
```

### Cross-Repository References

For referencing issues or PRs in other repositories:
- `DanEdens/other-repo#123`

## Tracking Progress

### Project Views

Our project has multiple views:

- **Table View**: Comprehensive list with all metadata
- **Board View**: Kanban-style view of work progress
- **Roadmap View**: Timeline-based view of upcoming work

### Filtering and Sorting

Use filters to focus on specific aspects:
- Filter by assignee to see your tasks
- Filter by label to see priorities
- Filter by milestone to see release planning

## Weekly Review Process

1. Triage new issues and add to the project
2. Update status of ongoing issues
3. Review stale PRs and issues
4. Adjust priorities for the upcoming week
5. Archive completed items older than 2 weeks

Remember to keep the project board updated as it serves as the single source of truth for our development status.
