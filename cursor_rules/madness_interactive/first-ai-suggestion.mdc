# Development Workflow & AI Assistant Guidelines

## Project Context Prompt for AI Assistants

When working on this project, you are assisting with an **AI-powered Todo task manager** called "An AI Agent Swarm fighting to save you mental bandwidth." This is a production system currently transitioning from a Node-red based UI to a React frontend while maintaining MCP server and AI Agent Swarm functionality.

## Current Development Challenges

### Infrastructure Migration
- **Current**: Development happening in server home directory (`/home/ubuntu`)
- **Goal**: Move to proper project repository structure
- **Priority**: Maintain uptime of existing Node-red dashboard on port 9191

### Domain Routing Issue
- **Current**: nginx serves static page on port 80, Node-red UI on port 9191
- **Goal**: Route `madnessinteractive.cc` to Node-red dashboard seamlessly
- **Solution**: nginx reverse proxy configuration (recommended approach)

### Technology Transition
- **From**: Node-red dashboard with HTML/JS components
- **To**: React application with authentication
- **Constraint**: Must maintain AI Agent Swarm and MCP server integration

## Development Environment Standards

### When Setting Up New Project Repo:
1. **Preserve existing Node-red flows** - they contain critical business logic
2. **Document MCP server endpoints** and AI agent configurations
3. **Plan authentication architecture** early in React migration
4. **Maintain MQTT broker configurations** for agent communication
5. **Create proper environment variable management** for AWS deployment

### Code Organization Principles:
```
project-root/
‚îú‚îÄ‚îÄ frontend/           # React application (future)
‚îú‚îÄ‚îÄ backend/           # Node-red flows + MCP servers
‚îú‚îÄ‚îÄ ai-agents/         # AI Agent Swarm configurations
‚îú‚îÄ‚îÄ infrastructure/    # nginx, docker, deployment configs
‚îú‚îÄ‚îÄ docs/             # Documentation and architecture notes
‚îî‚îÄ‚îÄ scripts/          # Deployment and utility scripts
```

## AI Assistant Behavior Guidelines

### Safety First Approach:
- **Always verify current service status** before making changes
- **Use `sudo netstat -tlnp`** to check port usage before modifications
- **Test nginx configurations** with `sudo nginx -t` before reloading
- **Check PM2 process status** before modifying Node-red
- **Create backups** of critical configurations before changes

### Communication Style:
- **Be explicit about production risks** when suggesting changes
- **Offer multiple implementation options** with pros/cons
- **Explain the "why" behind technical decisions** for learning
- **Reference existing project structure** when making suggestions
- **Consider the mental bandwidth philosophy** in UX decisions

### Code Quality Standards:
- **Document MCP integrations** thoroughly
- **Write clear commit messages** explaining impact on AI functionality
- **Test AI agent interactions** after any backend changes
- **Maintain backwards compatibility** during React migration
- **Follow security best practices** for authentication implementation

## Key Project Concepts to Remember

### Mental Bandwidth Philosophy:
- The core value proposition is **reducing cognitive load** for users
- UI/UX decisions should **minimize decision fatigue**
- AI agents should **proactively handle routine tasks**
- The system should **learn user patterns** and adapt

### MCP Server Integration:
- Model Context Protocol servers provide **AI functionality backbone**
- Maintain **API compatibility** during frontend transitions
- Document **agent communication patterns** for debugging
- Consider **performance implications** of AI operations

### AI Agent Swarm Concepts:
- Multiple AI agents work **collaboratively** on user tasks
- Agents have **specialized functions** (planning, execution, monitoring)
- **Inter-agent communication** happens via MQTT broker
- Agent **state management** is critical for reliability

## Migration Strategy Reminders

### Phase 1 - Infrastructure (Current):
- ‚úÖ Set up nginx reverse proxy for domain routing
- ‚è≥ Migrate development to proper project repository
- ‚è≥ Establish CI/CD pipeline for safe deployments

### Phase 2 - Frontend Migration:
- üìã Audit existing Node-red dashboard components
- üìã Design React component architecture
- üìã Implement authentication system
- üìã Migrate components incrementally

### Phase 3 - AI Enhancement:
- üìã Optimize MCP server performance
- üìã Expand AI Agent Swarm capabilities
- üìã Implement advanced mental bandwidth features
- üìã Add analytics and learning capabilities

## Quick Reference Commands

```bash
# Service status checks
sudo systemctl status nginx
pm2 list
pm2 logs node-red

# Port monitoring
sudo netstat -tlnp | grep -E ':(80|9191|8000)'
sudo lsof -i :9191

# Nginx management
sudo nginx -t
sudo systemctl reload nginx
sudo systemctl restart nginx

# Node-red management
pm2 restart node-red
pm2 stop node-red
pm2 start node-red

# Project directory navigation
cd ~/.node-red/projects/saws-flow/
cd ~/notes/
cd ~/data/
```

## Emergency Protocols

### If Node-red Dashboard Goes Down:
1. Check PM2 status: `pm2 list`
2. Check logs: `pm2 logs node-red`
3. Restart if needed: `pm2 restart node-red`
4. Verify port 9191: `sudo netstat -tlnp | grep :9191`

### If nginx Routing Fails:
1. Test configuration: `sudo nginx -t`
2. Check error logs: `sudo tail -f /var/log/nginx/error.log`
3. Reload safely: `sudo systemctl reload nginx`
4. Fallback: Revert to previous configuration

### If MCP Server Disconnects:
1. Check MQTT broker status
2. Verify AI agent process states
3. Review connection logs
4. Restart agents in proper sequence

Remember: **This is a production system serving real users. Always prioritize stability over rapid development.**


# AI-Powered Todo Task Manager - Project Architecture

## Project Overview
This is an **AI-powered Todo task manager** with the tagline: "An AI Agent Swarm fighting to save you mental bandwidth." The system combines MCP (Model Context Protocol) servers with AI Agent Swarms to provide intelligent task management.

## Current Architecture & Infrastructure

### Server Setup (AWS Linux)
- **OS**: Linux 6.8.0-1029-aws
- **Domain**: madnessinteractive.cc
- **Current Location**: `/home/ubuntu` (server home directory)
- **Target**: Moving to dedicated project repository for proper development environment

### Port Configuration
- **Port 80**: nginx serving static "under construction" page from `/var/www/html`
- **Port 9191**: Node-red UI dashboard (current main interface)
- **Port 8000**: Python service (detected)
- **Future Goal**: Redirect madnessinteractive.cc from port 80 to Node-red on 9191 using nginx reverse proxy

### Current Tech Stack
- **Frontend**: Node-red UI dashboard (HTML/JS)
- **Backend**: Node-red flows + MCP servers
- **Web Server**: nginx (reverse proxy candidate)
- **AI Components**: MCP server integration + AI Agent Swarm
- **Future Frontend**: React (migration planned)

## Migration Goals & Development Plans

### Phase 1: Infrastructure Setup
1. **Domain Redirect**: Configure nginx reverse proxy to redirect madnessinteractive.cc to Node-red (port 9191)
2. **Repository Migration**: Move development from server home to proper project repo
3. **Development Environment**: Establish proper dev environment with version control

### Phase 2: Frontend Evolution
1. **Current State**: Node-red dashboard with HTML/JS components
2. **Target State**: React application
3. **Migration Strategy**: Gradual component-by-component migration while keeping Node-red backend
4. **Authentication**: Implement user login system before dashboard access

### Phase 3: AI Integration Enhancement
1. **MCP Server**: Model Context Protocol server integration
2. **AI Agent Swarm**: Multiple AI agents working collaboratively
3. **Mental Bandwidth Focus**: Core value proposition of reducing cognitive load

## Key Directories & Files

### Configuration Files
- @3003.conf - Port configuration
- @4140.conf - Port configuration
- @update_dns.sh - DNS update script

### Node-red Setup
- **Location**: `.node-red/` directory
- **Projects**: `.node-red/projects/saws-flow/` (potential main flow)
- **UI Builder**: `.node-red/projects/saws-flow/uibuilder/`

### Data & Status Tracking
- @notes/ - Extensive project notes and command references
- @data/ - Application data
- @localstore/ - Local storage

### Development Tools
- **MQTT Broker**: @dvt-mqtt-broker/
- **Broker Configs**: @brokerconfigs/

## Development Guidelines

### When Working on This Project:
1. **Always check current port configurations** before making infrastructure changes
2. **Preserve Node-red flows** during any migration - they contain critical business logic
3. **Plan for user authentication** in any frontend changes
4. **Consider nginx reverse proxy** for professional domain handling
5. **Document MCP server integrations** for AI functionality
6. **Test AI Agent Swarm interactions** thoroughly

### Key Commands for Development:
```bash
# Check current port usage
sudo netstat -tlnp | grep :80
sudo netstat -tlnp | grep :9191

# Node-red service management
pm2 list
pm2 logs node-red

# Nginx configuration
sudo nano /etc/nginx/sites-enabled/default
sudo nginx -t && sudo systemctl reload nginx
```

## Future Architecture Vision
```
User Request ‚Üí nginx (port 80) ‚Üí Node-red Dashboard (port 9191) ‚Üí MCP Server ‚Üí AI Agent Swarm
                                       ‚Üì
                               React Components (future)
                                       ‚Üì
                               Authentication Layer
                                       ‚Üì
                               Todo Task Management Core
```

## Critical Notes for AI Assistants
- **This is a production server** - be cautious with service restarts
- **Node-red contains live flows** - backup before major changes
- **Domain is live** - test changes carefully
- **MCP integration is core** - maintain AI functionality during migrations
- **User experience focus** - "saving mental bandwidth" is the key value proposition

# Quick Context Prompt for AI Assistants

## Copy-Paste Briefing for New AI Sessions:

```
I'm working on an AI-powered Todo task manager with the tagline "An AI Agent Swarm fighting to save you mental bandwidth."

CURRENT SETUP:
- Production AWS server running nginx (port 80) + Node-red dashboard (port 9191)
- Domain: madnessinteractive.cc currently shows "under construction" on port 80
- For testing, Begin with redirect madnessinteractive.cc to Node-red dashboard on port 9191
- Product goal MCP server based "Jira killer" + AI Agent Swarm for intelligent task management

IMMEDIATE GOALS:
1. Set up nginx reverse proxy to route domain to Node-red dashboard
2. Migrate development from server home directory to proper project repo
3. Plan React migration while preserving Node-red flows + AI functionality

CONSTRAINTS:
- This is a PRODUCTION system - prioritize stability
- Must preserve existing Node-red flows (contain critical business logic)
- Must maintain MCP server and AI Agent Swarm integrations
- Authentication system needed before React migration

Please check .cursor/rules/ for complete project documentation before making suggestions.
```

## Alternative Shorter Version:

```
Working on production AI Todo manager: "AI Agent Swarm fighting to save mental bandwidth"
- nginx (port 80) + Node-red dashboard (port 9191) + MCP servers + AI agents
- Need: nginx reverse proxy madnessinteractive.cc ‚Üí port 9191
- Future: React migration with authentication
- Critical: Preserve Node-red flows + AI functionality, production stability first
Check .cursor/rules/ for full context.
