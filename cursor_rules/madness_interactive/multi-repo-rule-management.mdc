---
description:
globs:
alwaysApply: false
---
# Multi-Repository Rule Management

## Overview

This guide explains how to manage Cursor rules across a multi-repository architecture, where a master repository contains multiple subrepos. Consistent rules across repositories help maintain code quality and standardize development practices.

## Rule Propagation Structure

```
Madness_interactive/         # Master repository
├── .cursor/
│   └── rules/               # Master rules
│       ├── global-rules.mdc # Apply to all repos
│       └── specific-rules.mdc
├── projects/
│   ├── python/
│   │   ├── Omnispindle/     # Subrepo
│   │   │   ├── .cursor/
│   │   │   │   └── rules/   # Subrepo rules (inherit + specific)
│   │   ├── AnotherRepo/
│   │   │   ├── .cursor/
│   │   │   │   └── rules/
```

## Rule Types

### Master Repository Rules

Rules in the master repository (`Madness_interactive`) fall into two categories:

1. **Global Rules**: Apply to all subrepos
   - Development standards
   - Git workflows
   - Project structure conventions
   - Code formatting guidelines

2. **Template Rules**: Customized for specific project types
   - Python project rules
   - Node.js project rules
   - Frontend project rules

### Subrepo Rules

Rules in subrepos combine:

1. **Inherited Rules**: Copied from master repo
2. **Specific Rules**: Unique to the subrepo's needs

## Rule Propagation Process

### Manual Propagation

To copy rules from master repo to subrepos:

```bash
# From master repo root
cp .cursor/rules/git-workflow.mdc projects/python/Omnispindle/.cursor/rules/
cp .cursor/rules/github-project-management.mdc projects/python/Omnispindle/.cursor/rules/
cp .cursor/rules/specific-rule.mdc projects/python/AnotherRepo/.cursor/rules/
```

### Automated Propagation

Use the rule sync script:

```bash
# From master repo root
python tools/sync_cursor_rules.py --source .cursor/rules/ --target projects/python/Omnispindle/.cursor/rules/ --rules git-workflow,github-project-management
```

## Rule Precedence

When rules overlap:

1. Subrepo-specific rules take highest precedence
2. Inherited rules from master repo apply where not overridden
3. Language-specific master repo rules apply to matching file types

## Rule Update Workflow

1. **Update in Master Repo First**:
   - Make changes to rules in the master repo
   - Test rules to ensure they work as expected
   - Commit changes to master repo

2. **Propagate to Subrepos**:
   - Copy updated rules to relevant subrepos
   - Commit changes in each subrepo
   - Push all changes

3. **Documentation**:
   - Document rule changes in commit messages
   - Update rule version numbers if applicable

## Syncing from Subrepo to Master

For improvements made in subrepos:

```bash
# From subrepo
cp .cursor/rules/improved-rule.mdc /path/to/master/.cursor/rules/

# Or from master
cp projects/python/Omnispindle/.cursor/rules/improved-rule.mdc .cursor/rules/
```

## Best Practices

1. **Version Rules**: Include version number in rule files
2. **Rule Documentation**: Begin each rule with clear documentation of its purpose
3. **Minimal Duplication**: Prefer one source of truth for each rule
4. **Regular Sync**: Schedule regular rule sync across repositories
5. **Test Before Propagation**: Test rule changes before propagating
6. **Scope Appropriately**: Use glob patterns to target relevant files

## Rules to Propagate from Omnispindle

Key rules to propagate from Omnispindle to other repositories:

- `git-workflow.mdc`: Git branching, commits, and PR practices
- `github-project-management.mdc`: GitHub project and issue management
- `mcp-todo-integration.mdc`: MCP Todo server integration
- `node-red-flows.mdc`: Node-RED specific patterns (only for Node-RED projects)

Remember that rule management is a crucial part of maintaining consistency across a multi-repository architecture.
