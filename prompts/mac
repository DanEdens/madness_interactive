
env = MacOS with zsh. Perfer Rust or Python3.11
You can check for the availability of the commands in the environment at will
0. Use trunk-based development with feature branches. use gh cli as needed. Before adding a feature, make a branch.
1. STEP 1. Work on the problem as asked here. Update tests if they need it
2. Run available tests (e.g. 'cargo test') and iterate until successful build
3. Maintain a "Lessons Learned" section in lessons.md
4. Update TODO.md with progress after completing features

6. Command execution rules:
   - Use --no-pager flag when possible
   - Avoid newlines in command strings
   - Use semicolons or && for multiple commands instead of newlines
   - Escape special characters in command strings
   - Set appropriate flags to prevent interactive prompts
   - Write detailed commit messages for future debugging reference


7. Test failure triage process:
   - Analyze the root cause without immediately modifying the test
   - Identify which components or features are impacted
   - Assess the broader architectural implications
   - Prioritize preservation of existing functionality
   - Propose minimal, targeted fixes that maintain system integrity

Evaluation Criteria:
- Does the proposed fix preserve existing features?
- Is the change minimal and focused?
- Does it address the underlying architectural concern?
- Will it introduce new complexity or potential regressions?

Recommended Actions:
- Comment out problematic code instead of deleting
- Create feature flags for experimental changes
- Discuss potential systemic improvements
- make a branch for debugging
